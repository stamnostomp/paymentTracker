import CssWhat from "css-what";
import * as postcss from "postcss";
export interface LogFunction {
    (message: string): void;
}
export interface GroupedDeclarations {
    recognized: Map<string, RecognizedDeclaration>;
    colorParameterized: Map<string, ParameterizedDeclaration>;
    unrecognized: UnrecognizedDeclaration[];
    keyframes: Map<string, Keyframe[]>;
}
export interface RecognizedDeclaration {
    propertiesBySelector: PropertiesBySelector[];
    originalRules: (postcss.Rule | postcss.Container<postcss.ChildNode>)[];
    originalClassName: string;
}
export interface PropertiesBySelector {
    subselectors: Subselector[];
    properties: CssProperty[];
}
export interface ParameterizedDeclaration {
    propertiesBySelector: ParameterizedPropertiesBySelector[];
    originalRules: (postcss.Rule | postcss.Container<postcss.ChildNode>)[];
    originalColorsReplaced: string[];
    originalClassName: string;
}
export interface ParameterizedPropertiesBySelector {
    subselectors: Subselector[];
    properties: (CssProperty | ParameterizedProperty)[];
}
export interface Subselector {
    mediaQuery: null | string;
    rest: SubselectorRest;
}
export interface Keyframe {
    percentage: number;
    properties: CssProperty[];
}
export declare type SubselectorRest = PlainSubselectorRest | BasicSubselectorRest | PseudoSubselectorRest;
export interface PlainSubselectorRest {
    type: "plain";
}
export interface BasicSubselectorRest {
    type: "child" | "descendant" | "adjacent" | "sibling";
    rest: string;
}
export interface PseudoSubselectorRest {
    type: "pseudo";
    rest: {
        type: "pseudo" | "pseudo-element";
        name: string;
    }[];
}
export interface CssProperty {
    prop: string;
    value: string;
}
export interface ParameterizedProperty {
    prop: string;
    valuePrefix: string;
    valueSuffix: string;
    opacity?: OpacityVariableName | OpacityLiteral;
}
export interface OpacityVariableName {
    variableName: string;
}
export interface OpacityLiteral {
    literal: string;
}
export interface UnrecognizedDeclaration {
    selector: string;
    properties: Array<CssProperty>;
    mediaQuery: string | null;
}
export interface Breakpoint {
    name: string;
    size: string;
}
export declare function isPlainSubselectorRest(selector: SubselectorRest): selector is PlainSubselectorRest;
export declare function isBasicSubselectorRest(selector: SubselectorRest): selector is BasicSubselectorRest;
export declare function isPseudoSubselectorRest(selector: SubselectorRest): selector is PseudoSubselectorRest;
export declare function isBasicSubselectorType(type: string): type is BasicSubselectorRest["type"];
export declare function isPseudoSelector(selector: CssWhat.Selector): selector is CssWhat.PseudoSelector;
export declare function isPseudoElementSelector(selector: CssWhat.Selector): selector is CssWhat.PseudoElement;
export interface NamingOptions {
    prefix?: string;
    nameStyle: "camel" | "snake";
}
