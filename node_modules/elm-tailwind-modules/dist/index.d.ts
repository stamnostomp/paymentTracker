import * as postcss from "postcss";
import { LogFunction } from "./types";
import * as documentation from "./docs";
export declare const defaultTailwindConfig: any;
export declare const docs: typeof documentation;
export interface RunConfiguration {
    directory?: string | null;
    moduleName?: string;
    postcssPlugins?: postcss.AcceptedPlugin[];
    tailwindConfig?: any;
    generateDocumentation?: boolean | documentation.DocumentationGenerator;
    logFunction?: LogFunction;
}
export interface RunResult {
    themeModule: string;
    utilitiesModule: string;
    breakpointsModule: string;
    postcssResult: postcss.Result;
}
/**
 * Runs elm-tailwind-modules like the command line interface is run.
 *
 * @param directory
 * the directory path to save to. If null, this function won't save the generated files to disk.
 *
 * @returns
 * the generated modules as string.
 */
export declare function run({ directory, moduleName, postcssPlugins, tailwindConfig, generateDocumentation, logFunction, }: RunConfiguration): Promise<RunResult>;
export interface ModulesGeneratedHook {
    (_: {
        utilitiesModule: string;
        themeModule: string;
        breakpointsModule: string;
    }): void;
}
/**
 * This exposes the actual postcss plugin that's used in `run`.
 *
 * @param modulesGeneratedHook
 * a callback which is called once the modules have been generated.
 */
export declare function asPostcssPlugin({ moduleName, tailwindConfig, generateDocumentation, logFunction, modulesGeneratedHook }: {
    moduleName: string;
    tailwindConfig: any;
    generateDocumentation: boolean | documentation.DocumentationGenerator;
    logFunction: LogFunction;
    modulesGeneratedHook: ModulesGeneratedHook;
}): {
    postcssPlugin: string;
    OnceExit(root: postcss.Root): Promise<void>;
};
/**
 * This exposes the actual logic for writing files and writing some console output
 * that is used in `run` (in the callback to `asPostcssPlugin`).
 */
export declare function writeGeneratedFiles({ directory, moduleName, logFunction, generated }: {
    directory: string;
    moduleName: string;
    logFunction: LogFunction;
    generated: {
        utilitiesModule: string;
        breakpointsModule: string;
        themeModule: string;
    };
}): Promise<void>;
